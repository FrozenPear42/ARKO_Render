# macros
.macro	push (%reg)
	sw	%reg, ($sp)
	subiu	$sp, $sp, 4
.end_macro

.macro	pop (%reg)
	addiu	$sp, $sp, 4
	lw	%reg, ($sp)
.end_macro

.macro	ret
	pop	($t9)
	jr	$t9	
.end_macro

.macro	pow (%target, %source, %n)
	mov.d	%target, %source
	li	$t9, %n
	subiu	$t9, $t9, 1
pow_step:
	mul.d	%target, %target, %source
	subiu	$t9, $t9, 1
	bgtz	$t9, pow_step	
.end_macro

.macro	factorial (%dest, %n)
	li	$t9, %n
	li	$t8, %n
	subiu	$t9, $t9, 1
factorial_step:
	mul	$t8, $t8, $t9  
	subiu	$t9, $t9, 1
	bgtz	$t9, factorial_step	
	mtc1.d	$t8, %dest
	cvt.d.w	%dest, %dest
.end_macro

.macro 	li.d.w (%dest, %val)
	li	$t9, %val
	mtc1.d	$t9, %dest
	cvt.d.w	%dest, %dest
.end_macro

.macro	swap (%a, %b)
	move	$t9, %a
	move 	%a, %b
	move	%b, $t9
.end_macro

.macro	ld_vert	(%x, %y, %vert)
	l.d	$f0, %vert
	cvt.w.d	$f0, $f0
	mfc1	%x, $f0
	l.d	$f0, %vert + 8
	cvt.w.d	$f0, $f0
	mfc1	%y, $f0	
.end_macro

.macro	mat_off	(%dest, %base, %row, %col)
	sll	%dest, %row, 4
	sll	$t9, %col, 3
	addu	%dest, %dest, $t9
	addu	%dest, %dest, %base
.end_macro

.macro print_v	(%v)
	
.end_macro


#data
	.data

bitmap:	.space	0x100000		# 512 * 512 * 4
pi:	.double 3.141592
pi_2:	.double 1.57
pi_x_2: .double 6.28

vert:
v0:	.double -1.0 , -1.0, -1.0, 1.0
v1:	.double  1.0 , -1.0, -1.0, 1.0
v2:	.double  1.0 ,  1.0, -1.0, 1.0
v3:	.double -1.0 ,  1.0, -1.0, 1.0
v4:	.double -1.0 , -1.0,  1.0, 1.0
v5:	.double  1.0 , -1.0,  1.0, 1.0
v6:	.double  1.0 ,  1.0,  1.0, 1.0
v7:	.double -1.0 ,  1.0,  1.0, 1.0

vert_res:
rv0:	.double -1.0 , -1.0, -1.0, 1.0
rv1:	.double  1.0 , -1.0, -1.0, 1.0
rv2:	.double  1.0 ,  1.0, -1.0, 1.0
rv3:	.double -1.0 ,  1.0, -1.0, 1.0
rv4:	.double -1.0 , -1.0,  1.0, 1.0
rv5:	.double  1.0 , -1.0,  1.0, 1.0
rv6:	.double  1.0 ,  1.0,  1.0, 1.0
rv7:	.double -1.0 ,  1.0,  1.0, 1.0


m_mod:	.double  1.0,  0.0,  0.0,  0.0
	.double  0.0,  1.0,  0.0,  0.0
	.double  0.0,  0.0,  1.0,  0.0
	.double  0.0,  0.0,  0.0,  1.0
	
m_view:	.double  1.0,  0.0,  0.0,  0.0
	.double  0.0,  1.0,  0.0,  0.0
	.double  0.0,  0.0,  1.0,  0.0
	.double  0.0,  0.0,  0.0,  1.0
	
m_proj: .double  1.0,  0.0,  0.0,  0.0
	.double  0.0,  1.0,  0.0,  0.0
	.double  0.0,  0.0, -1.0, -1.0
	.double  0.0,  0.0, -0.1,  1.0

m_res:  .double  0.0,  0.0,  0.0,  0.0
	.double  0.0,  0.0,  0.0,  0.0
	.double  0.0,  0.0,  0.0,  0.0
	.double  0.0,  0.0,  0.0,  0.0

#code	
	.text
	.globl main
main:
	
	la	$a0, m_res
	la 	$a1, m_mod
	la	$a2, m_proj		
	jal 	mat_mul				
	jal	render		
			
	li	$v0, 10
	syscall

render:
	push	($ra)
	#prepare vertices
	
	li	$s0, 8
	la	$a1, m_mod
	
render_vert_loop:
	beqz	$s0, render_vert_loop_end
	mul	$t0, $s0, 32	
	la	$a0,  rv0
	add	$a0, $a0, $t0
	la	$a2,  v0
	add	$a2, $a2, $t0
	jal	mat_mul_vec	
	subiu	$s0, $s0, 1
	b	render_vert_loop
render_vert_loop_end:
	
	li	$v0, 0x00FF00FF	#set color
	ld_vert	($a0, $a1, rv0)
	ld_vert	($a2, $a3, rv1)
	jal	draw_line

	ld_vert	($a0, $a1, rv1)
	ld_vert	($a2, $a3, rv2)
	jal	draw_line

	ld_vert	($a0, $a1, rv2)
	ld_vert	($a2, $a3, rv3)
	jal	draw_line

	ld_vert	($a0, $a1, rv3)
	ld_vert	($a2, $a3, rv0)
	jal	draw_line

	ld_vert	($a0, $a1, rv0)
	ld_vert	($a2, $a3, rv4)
	jal	draw_line

	ld_vert	($a0, $a1, rv1)
	ld_vert	($a2, $a3, rv5)
	jal	draw_line

	ld_vert	($a0, $a1, rv2)
	ld_vert	($a2, $a3, rv6)
	jal	draw_line

	ld_vert	($a0, $a1, rv3)
	ld_vert	($a2, $a3, rv7)
	jal	draw_line

	ld_vert	($a0, $a1, rv4)
	ld_vert	($a2, $a3, rv5)
	jal	draw_line

	ld_vert	($a0, $a1, rv5)
	ld_vert	($a2, $a3, rv6)
	jal	draw_line

	ld_vert	($a0, $a1, rv6)
	ld_vert	($a2, $a3, rv7)
	jal	draw_line

	ld_vert	($a0, $a1, rv7)
	ld_vert	($a2, $a3, rv4)
	jal	draw_line

	ret


# $a0 - result
# $a1 - matrix A
# $a2 - matrix B

mat_mul:
	push	($ra)
	li	$t0, 4
mat_mul_1:	
	li	$t1, -1
mat_mul_1_step:
	addiu	$t1, $t1, 1
	bge	$t1, $t0, mat_mul_end
mat_mul_2:
	li	$t2, -1
mat_mul_2_step:
	addiu	$t2, $t2, 1
	bge	$t2, $t0, mat_mul_1_step
mat_mul_3:
	li	$t3, -1
mat_mul_3_step:
	addiu	$t3, $t3, 1
	bge	$t3, $t0, mat_mul_2_step	
	mat_off	($t4, $a0, $t1, $t2)	#load res addr to $t4
	mat_off	($t5, $a1, $t1, $t3)	#load A addr to $t5
	mat_off	($t6, $a2, $t3, $t1)	#load B addr to $t6
	l.d	$f0, ($t4)
	l.d	$f2, ($t5)
	l.d	$f4, ($t6)
	mul.d	$f2, $f2, $f4
	add.d	$f0, $f0, $f2
	s.d	$f0, ($t4)
	b	mat_mul_3_step
mat_mul_end:
	ret
	
# $a0 - result
# $a1 - matrix A
# $a2 - vector
mat_mul_vec:
	push	($ra)						
	li	$t0, 4
mat_mul_vec_1:	
	li	$t1, -1
mat_mul_vec_1_step:
	addiu	$t1, $t1, 1
	bge	$t1, $t0, mat_mul_vec_end	
mat_mul_vec_2:
	li	$t2, -1
mat_mul_vec_2_step:
	addiu	$t2, $t2, 1
	bge	$t2, $t0, mat_mul_vec_1_step
	mat_off	($t4, $a0, $t1, $zero)	#load res addr to $t4
	mat_off	($t5, $a1, $t1, $t2)	#load A addr to $t5
	mat_off	($t6, $a2, $t2, $zero)	#load B addr to $t6
	l.d	$f0, ($t4)
	l.d	$f2, ($t5)
	l.d	$f4, ($t6)
	mul.d	$f2, $f2, $f4
	add.d	$f0, $f0, $f2
	s.d	$f0, ($t4)
	b	mat_mul_vec_2_step
mat_mul_vec_end:	
	ret																	

# $f0 - argument
# $f2 - result
sine:
	push ($ra)	
	
	l.d	$f8, pi_x_2	
	div.d	$f10, $f0, $f8	
	round.w.d $f10, $f10
	cvt.d.w	$f10, $f10
	mul.d	$f10, $f10, $f8
	sub.d	$f0, $f0, $f10

	mov.d	$f2, $f0
	
	pow	($f6, $f0, 3)
	factorial ($f8, 3)
	div.d	$f6, $f6, $f8
	sub.d	$f2, $f2, $f6

	pow	($f6, $f0, 5)		
	factorial ($f8, 5)
	div.d	$f6, $f6, $f8
	add.d	$f2, $f2, $f6

	pow	($f6, $f0, 7)	
	factorial ($f8, 7)
	div.d	$f6, $f6, $f8
	sub.d	$f2, $f2, $f6

	pow	($f6, $f0, 9)	
	factorial ($f8, 9)
	div.d	$f6, $f6, $f8
	add.d	$f2, $f2, $f6		

	pow	($f6, $f0, 11)	
	factorial ($f8, 11)
	div.d	$f6, $f6, $f8
	add.d	$f2, $f2, $f6		
																																																																																																																																																																																																																																																																																																																														
	ret

cosine:
	push	($ra)
	l.d	$f10, pi_2
	sub.d	$f0, $f0, $f10
	jal	sine
	ret

# $a0 - x1
# $a1 - y1
# $v0 - color
draw_pixel:
	push	($ra)
	blt	$a0, 0, out_pixel
	blt	$a1, 0, out_pixel
	
	bgt	$a0, 512, out_pixel
	bgt	$a1, 512, out_pixel
	la 	$t8, bitmap
	mulu	$t9, $a1, 512	# $t9 - y offset
	addu	$t9, $t9, $a0  	# +x 
	sll	$t9, $t9, 2	# multiply by 4 to match word size
	add	$t8, $t8, $t9	# calculate pixel address 
	sw	$v0, ($t8)	# set color
out_pixel:
	ret
	
# $a0 - x1
# $a1 - y1
# $a2 - x2
# $a3 - y2
# $v0 - color
# $t0 - x_dir
# $t1 - y_dir
# $t2 - dx
# $t3 - dy
# $t4 - a
# $t5 - b
# $t6 - d
draw_line:
	push	($ra)
x_direction:
	bgt	$a0, $a2, x_neg		#direction of line - x_step
	li	$t0, 1			
	subu	$t2, $a2, $a0
	b	y_direction
x_neg:	
	li	$t0, -1
	subu	$t2, $a0, $a2
y_direction:	
	bgt	$a1, $a3, y_neg
	li	$t1, 1
	subu	$t3, $a3, $a1
	b	line_begin
y_neg:	
	li	$t1, -1
	subu	$t3, $a1, $a3		
line_begin:	
	jal	draw_pixel
	blt	$t2, $t3, draw_oy
draw_ox:	
	sub	$t4, $t3, $t2	# a = dy - dx
	srl	$t4, $t4, 1	# a = a / 2
	sll	$t5, $t3, 1	# b = dy * 2
	subu	$t6, $t5, $t2	# d = b - dx
draw_ox_step:
	beq	$a0, $a2, line_end	#
	bgez	$t6, draw_ox_move
draw_ox_stay:
	addu	$t6, $t6, $t5
	addu	$a0, $a0, $t0
	b	draw_ox_endstep
draw_ox_move:	
	addu	$a0, $a0, $t0
	addu	$a1, $a1, $t1
	addu	$t6, $t6, $t4
draw_ox_endstep:
	jal	draw_pixel
	b	draw_ox_step	
			
draw_oy:
	subu	$t4, $t2, $t3
	srl	$t4, $t4, 1
	sll	$t5, $t2, 1
	subu	$t6, $t5, $t3
draw_oy_step:
	beq	$a1, $a3, line_end
	bgez	$t6, draw_oy_move
draw_oy_stay:
	addu	$t6, $t6, $t5
	addu	$a1, $a1, $t1
	b	draw_oy_endstep
draw_oy_move:	
	addu	$a0, $a0, $t0
	addu	$a1, $a1, $t1
	addu	$t6, $t6, $t4
draw_oy_endstep:
	jal	draw_pixel
	b	draw_oy_step	
line_end:	
	ret
